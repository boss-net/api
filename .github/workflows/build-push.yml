name: Build and Push Daemon

on:
  push:
    branches: ["dev-docker", "deploy/dev"]
    paths:
      - boss-plugin/**
  pull_request:
    branches: ["dev-docker"]
    paths:
      - boss-plugin/**
  release:
    types: [published]
    paths:
      - boss-plugin/**

concurrency:
  group: build-push-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  BOSS_DAEMON_IMAGE_NAME: ${{ vars.BOSS_DAEMON_IMAGE_NAME || 'ghcr.io/boss-net/api' }}

jobs:
  matrix_prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo 'matrix={"include":[
              {"service_name":"build-serverless-daemon-amd64","platform":"linux/amd64","scope":"serverless"},
              {"service_name":"build-local-daemon-amd64","platform":"linux/amd64","scope":"local"}
            ]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"include":[
              {"service_name":"build-serverless-daemon-amd64","platform":"linux/amd64","scope":"serverless"},
              {"service_name":"build-serverless-daemon-arm64","platform":"linux/arm64","scope":"serverless"},
              {"service_name":"build-local-daemon-amd64","platform":"linux/amd64","scope":"local"},
              {"service_name":"build-local-daemon-arm64","platform":"linux/arm64","scope":"local"}
            ]}' >> $GITHUB_OUTPUT
          fi

  build:
    needs: matrix_prepare
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'arm64_runner' || 'ubuntu-latest' }}
    strategy:
      matrix: ${{ fromJson(needs.matrix_prepare.outputs.matrix) }}

    defaults:
      run:
        working-directory: boss-plugin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        run: |
          echo "PLATFORM_PAIR=${{ matrix.platform//\//- }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BOSS_DAEMON_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=branch
            type=sha
            type=raw,value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg PLATFORM=${{ matrix.scope }} \
            --build-arg VERSION=${{ github.sha }} \
            -t boss-plugin-daemon \
            -f ./docker/${{ matrix.scope }}.dockerfile .

      - name: Tag Docker image
        if: github.event_name != 'pull_request'
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            docker tag boss-plugin-daemon "$tag-${{ matrix.scope }}-${{ env.PLATFORM_PAIR }}"
          done

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            docker push "$tag-${{ matrix.scope }}-${{ env.PLATFORM_PAIR }}"
          done

  create-manifest:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scope: [serverless, local]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BOSS_DAEMON_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=branch
            type=sha
            type=raw,value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Push multi-arch manifest
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            docker manifest create "$tag-${{ matrix.scope }}" \
              "$tag-${{ matrix.scope }}-linux-amd64" \
              "$tag-${{ matrix.scope }}-linux-arm64"
            docker manifest push "$tag-${{ matrix.scope }}"
          done
